
# currently support only agenda
GENERIC_TAGGER_IMPL = collins

# currently support nivre, combined implementations (other implementations are not generalized)
GENERIC_DEPPARSER_IMPL = arceager
GENERIC_DEPPARSER_LABELED = true
# current naive
GENERIC_DEPLABELER_IMPL = naive
# currently support sr implementations 
GENERIC_CONPARSER_IMPL = sr
GENERIC_CONPARSER_D = -DNO_TEMP_CONSTITUENT -DGENERIC_CONLABEL_SIZE=12 -DFRAGMENTED_TREE

#===================================================================

SRC_GENERIC = $(SRC_DIR)/generic

SRC_GENERIC_TAGGER = $(SRC_COMMON)/tagger
DIST_GENERIC_TAGGER = $(DIST_DIR)/generic.postagger
OBJECT_GENERIC_TAGGER = $(OBJECT_DIR)/generic.postagger
$(DIST_GENERIC_TAGGER):
	mkdir $(DIST_GENERIC_TAGGER)
$(OBJECT_GENERIC_TAGGER):
	mkdir $(OBJECT_GENERIC_TAGGER)

SRC_GENERIC_DEPPARSER = $(SRC_COMMON)/depparser
DIST_GENERIC_DEPPARSER = $(DIST_DIR)/generic.depparser
OBJECT_GENERIC_DEPPARSER = $(OBJECT_DIR)/generic.depparser
ifeq ($(GENERIC_DEPPARSER_LABELED), true)
	GENERIC_DEPPARSER_D = -DLABELED
endif

ifeq ($(GENERIC_DEPPARSER_IMPL), combined)
	GENERIC_DEPPARSER_D := $(GENERIC_DEPPARSER_D) -DCOMBINED
	GENERIC_DEPPARSER_IMPL = nivre
endif

SRC_GENERIC_CONPARSER = $(SRC_COMMON_CONPARSER)
DIST_GENERIC_CONPARSER = $(DIST_DIR)/generic.conparser
OBJECT_GENERIC_CONPARSER = $(OBJECT_DIR)/generic.conparser

#===================================================================

# the partofspeech
$(OBJECT_DIR)/pos.ge.o: $(SRC_GENERIC)/tags.h $(SRC_GENERIC)/pos/generic.h $(SRC_GENERIC)/pos/generic.cpp
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -c $(SRC_GENERIC)/pos/generic.cpp -o $@

# the dependency label
$(OBJECT_DIR)/deplabel.ge.o: $(SRC_GENERIC)/dependency/label/generic.h $(SRC_GENERIC)/dependency/label/generic.cpp
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -c $(SRC_GENERIC)/dependency/label/generic.cpp -o $@

# the constituent label
$(OBJECT_DIR)/cfg.ge.o: $(SRC_GENERIC)/tags.h $(SRC_INCLUDES)/linguistics/cfg/generic.h $(SRC_LIBS)/linguistics/cfg/generic.cpp
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -c $(SRC_LIBS)/linguistics/cfg/generic.cpp -o $@

# the constituent
$(OBJECT_DIR)/constituent.ge.o: $(OBJECT_GENERIC_CONPARSER) $(SRC_GENERIC)/cfg.h $(SRC_INCLUDES)/linguistics/constituent.h $(SRC_LIBS)/linguistics/constituent.cpp
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -c $(SRC_LIBS)/linguistics/constituent.cpp -o $@

#===================================================================

generic.postagger: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_GENERIC_TAGGER) $(DIST_GENERIC_TAGGER) $(DIST_GENERIC_TAGGER)/tagger $(DIST_GENERIC_TAGGER)/train
	@echo The generic part-of-speech tagging system is compiled successfully into $(DIST_GENERIC_TAGGER).

# the weight module
$(OBJECT_GENERIC_TAGGER)/weight.o: $(OBJECT_GENERIC_TAGGER) $(OBJECT_DIR)/pos.ge.o $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger_weight.h $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger_weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_TAGGER) -c $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger_weight.cpp -o $(OBJECT_GENERIC_TAGGER)/weight.o

# the tagging object
$(OBJECT_DIR)/generic.postagger.o: $(OBJECT_DIR)/pos.ge.o $(SRC_INCLUDES)/hash.h $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger.h $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger.cpp $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger_weight.h $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger_weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_TAGGER) -I$(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL) -c $(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL)/tagger.cpp -o $(OBJECT_DIR)/generic.postagger.o

# the main executable file
$(DIST_GENERIC_TAGGER)/tagger: $(SRC_GENERIC_TAGGER)/main.cpp $(OBJECT_DIR)/generic.postagger.o $(OBJECT_GENERIC_TAGGER)/weight.o $(OBJECTS) $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_TAGGER) -I$(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL) -c $(SRC_GENERIC_TAGGER)/main.cpp -o $(OBJECT_GENERIC_TAGGER)/main.o
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_TAGGER)/tagger $(OBJECT_DIR)/generic.postagger.o $(OBJECT_GENERIC_TAGGER)/weight.o $(OBJECT_GENERIC_TAGGER)/main.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECTS)

# the trainer for generic pos tagging
$(DIST_GENERIC_TAGGER)/train: $(SRC_GENERIC_TAGGER)/train.cpp $(OBJECT_DIR)/generic.postagger.o $(OBJECT_GENERIC_TAGGER)/weight.o $(OBJECTS) $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_TAGGER) -I$(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL) -c $(SRC_GENERIC_TAGGER)/train.cpp -o $(OBJECT_GENERIC_TAGGER)/train.o
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_TAGGER)/train $(OBJECT_DIR)/generic.postagger.o $(OBJECT_GENERIC_TAGGER)/weight.o $(OBJECT_GENERIC_TAGGER)/train.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECTS)

#===================================================================

$(DIST_GENERIC_DEPPARSER):
	mkdir $(DIST_GENERIC_DEPPARSER)
$(OBJECT_GENERIC_DEPPARSER):
	mkdir $(OBJECT_GENERIC_DEPPARSER)
generic.depparser: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECT_GENERIC_DEPPARSER) $(DIST_GENERIC_DEPPARSER) $(DIST_GENERIC_DEPPARSER)/depparser $(DIST_GENERIC_DEPPARSER)/train
	@echo The generic dependency parser system is compiled successfully into $(DIST_GENERIC_DEPPARSER).

# the weight module
$(OBJECT_GENERIC_DEPPARSER)/weight.o: $(OBJECT_GENERIC_DEPPARSER) $(SRC_GENERIC_DEPPARSER)/depparser_weight_base.h $(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL)/depparser_weight.h $(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL)/depparser_weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -c $(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL)/depparser_weight.cpp -o $(OBJECT_GENERIC_DEPPARSER)/weight.o

# the depparser object
$(OBJECT_DIR)/generic.depparser.o: $(SRC_GENERIC_DEPPARSER)/dynamicOracle.h $(SRC_GENERIC_DEPPARSER)/dependenciesCollection.h $(SRC_GENERIC_DEPPARSER)/dynamicFeatureCollection.h $(SRC_INCLUDES)/hash.h $(SRC_GENERIC_DEPPARSER)/depparser_base.h $(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL)/depparser.h $(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL)/depparser.cpp $(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL)/state.h ./Makefile
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -c $(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL)/depparser.cpp -o $(OBJECT_DIR)/generic.depparser.o

# the dynamic oracle
$(OBJECT_DIR)/dynamic.oracle.o: $(SRC_GENERIC_DEPPARSER)/dynamicOracle.h $(SRC_GENERIC_DEPPARSER)/dependenciesCollection.h $(SRC_GENERIC_DEPPARSER)/dynamicOracle.cpp
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -c $(SRC_GENERIC_DEPPARSER)/dynamicOracle.cpp -o $(OBJECT_DIR)/dynamic.oracle.o

# the dependencies collection
$(OBJECT_DIR)/dependencies.collection.o: $(SRC_GENERIC_DEPPARSER)/dependenciesCollection.h $(SRC_GENERIC_DEPPARSER)/dependenciesCollection.cpp 
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -c $(SRC_GENERIC_DEPPARSER)/dependenciesCollection.cpp -o $(OBJECT_DIR)/dependencies.collection.o

# the feature collection
$(OBJECT_DIR)/feature.collection.o: $(SRC_GENERIC_DEPPARSER)/dynamicFeatureCollection.h $(SRC_GENERIC_DEPPARSER)/dynamicFeatureCollection.cpp 
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -c $(SRC_GENERIC_DEPPARSER)/dynamicFeatureCollection.cpp -o $(OBJECT_DIR)/feature.collection.o

# the main executable
$(DIST_GENERIC_DEPPARSER)/depparser: $(OBJECT_DIR)/dynamic.oracle.o $(OBJECT_DIR)/dependencies.collection.o $(OBJECT_DIR)/feature.collection.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(SRC_GENERIC_DEPPARSER)/main.cpp $(OBJECT_DIR)/generic.depparser.o $(OBJECT_GENERIC_DEPPARSER)/weight.o $(OBJECTS) libvw.a
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -c $(SRC_GENERIC_DEPPARSER)/main.cpp -o $(OBJECT_GENERIC_DEPPARSER)/main.o 
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_DEPPARSER)/depparser $(OBJECT_DIR)/dynamic.oracle.o $(OBJECT_DIR)/dependencies.collection.o $(OBJECT_DIR)/feature.collection.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECT_DIR)/generic.depparser.o $(OBJECT_GENERIC_DEPPARSER)/weight.o $(OBJECT_GENERIC_DEPPARSER)/main.o $(OBJECTS) -l vw -l allreduce -l boost_program_options -l z -l pthread

# the trainer for depparser
$(DIST_GENERIC_DEPPARSER)/train: $(OBJECT_DIR)/dynamic.oracle.o $(OBJECT_DIR)/dependencies.collection.o $(OBJECT_DIR)/feature.collection.o $(SRC_GENERIC_DEPPARSER)/train.cpp $(OBJECT_DIR)/generic.depparser.o $(OBJECT_GENERIC_DEPPARSER)/weight.o $(OBJECTS) libvw.a
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -c $(SRC_GENERIC_DEPPARSER)/train.cpp -o $(OBJECT_GENERIC_DEPPARSER)/train.o
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_DEPPARSER)/train $(OBJECT_DIR)/dynamic.oracle.o $(OBJECT_DIR)/dependencies.collection.o $(OBJECT_DIR)/feature.collection.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECT_DIR)/generic.depparser.o $(OBJECT_GENERIC_DEPPARSER)/weight.o $(OBJECT_GENERIC_DEPPARSER)/train.o $(OBJECTS) -l vw -l allreduce -l $(BOOST_PROGRAM_OPTIONS) -l z -l pthread

#===================================================================

$(DIST_GENERIC_CONPARSER):
	mkdir $(DIST_GENERIC_CONPARSER)
$(OBJECT_GENERIC_CONPARSER):
	mkdir $(OBJECT_GENERIC_CONPARSER)
generic.conparser: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/cfg.ge.o $(OBJECT_GENERIC_CONPARSER) $(DIST_GENERIC_CONPARSER) $(DIST_GENERIC_CONPARSER)/conparser $(DIST_GENERIC_CONPARSER)/train 
	@echo The generic constituent parser system is compiled successfully into $(DIST_GENERIC_CONPARSER).

# the weight module
$(OBJECT_GENERIC_CONPARSER)/weight.o: $(SRC_COMMON_CONPARSER)/weight_base.h $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/weight.h $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) $(GENERIC_CONPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_COMMON_CONPARSER) -I$(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL) -c $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/weight.cpp -o $(OBJECT_GENERIC_CONPARSER)/weight.o

# the conparser object
$(OBJECT_DIR)/generic.conparser.o: $(SRC_INCLUDES)/linguistics/constituent.h $(SRC_INCLUDES)/hash.h $(SRC_COMMON_CONPARSER)/conparser_base.h $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/conparser.h $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/conparser.cpp $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/stateitem.h $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/rule.h ./Makefile
	$(CXX) $(CXXFLAGS) $(GENERIC_CONPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_COMMON_CONPARSER) -I$(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL) -c $(SRC_COMMON_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL)/conparser.cpp -o $(OBJECT_DIR)/generic.conparser.o

# the main executable
$(DIST_GENERIC_CONPARSER)/conparser: $(SRC_GENERIC_CONPARSER)/main.cpp $(OBJECT_DIR)/generic.conparser.o $(OBJECT_GENERIC_CONPARSER)/weight.o $(OBJECT_DIR)/constituent.ge.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(GENERIC_CONPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_CONPARSER) -I$(SRC_GENERIC_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL) -c $(SRC_GENERIC_CONPARSER)/main.cpp -o $(OBJECT_GENERIC_CONPARSER)/main.o
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_CONPARSER)/conparser $(OBJECT_DIR)/generic.conparser.o $(OBJECT_GENERIC_CONPARSER)/weight.o $(OBJECT_GENERIC_CONPARSER)/main.o $(OBJECT_DIR)/constituent.ge.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/cfg.ge.o $(OBJECTS)

# the trainer for conparser
$(DIST_GENERIC_CONPARSER)/train: $(SRC_GENERIC_CONPARSER)/train.cpp $(OBJECT_DIR)/generic.conparser.o $(OBJECT_GENERIC_CONPARSER)/weight.o $(OBJECTS) $(OBJECT_DIR)/constituent.ge.o
	$(CXX) $(CXXFLAGS) $(GENERIC_CONPARSER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_GENERIC_CONPARSER) -I$(SRC_GENERIC_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL) -c $(SRC_GENERIC_CONPARSER)/train.cpp -o $(OBJECT_GENERIC_CONPARSER)/train.o
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_CONPARSER)/train $(OBJECT_DIR)/generic.conparser.o $(OBJECT_GENERIC_CONPARSER)/weight.o $(OBJECT_GENERIC_CONPARSER)/train.o $(OBJECT_DIR)/constituent.ge.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/cfg.ge.o $(OBJECTS)

#===================================================================

SRC_GENERIC_DEPLABELER = $(SRC_COMMON_DEPLABELER)
DIST_GENERIC_DEPLABELER = $(DIST_DIR)/generic.deplabeler
OBJECT_GENERIC_DEPLABELER = $(OBJECT_DIR)/generic.deplabeler

$(DIST_GENERIC_DEPLABELER):
	mkdir $(DIST_GENERIC_DEPLABELER)
$(OBJECT_GENERIC_DEPLABELER):
	mkdir $(OBJECT_GENERIC_DEPLABELER)
generic.deplabeler: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_GENERIC_DEPLABELER) $(DIST_GENERIC_DEPLABELER) $(DIST_GENERIC_DEPLABELER)/deplabeler $(DIST_GENERIC_DEPLABELER)/train
	@echo The generic dependency labeler system is compiled successfully into $(DIST_GENERIC_DEPLABELER).

# the weight module
$(OBJECT_GENERIC_DEPLABELER)/weight.o: $(OBJECT_GENERIC_DEPLABELER) $(SRC_COMMON_DEPLABELER)/weight_base.h $(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL)/weight.h $(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL)/weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPLABELER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL)/weight.cpp -o $(OBJECT_GENERIC_DEPLABELER)/weight.o

# the deplabeler object
$(OBJECT_DIR)/generic.deplabeler.o: $(SRC_INCLUDES)/hash.h $(SRC_COMMON_DEPLABELER)/deplabeler_base.h $(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL)/deplabeler.h $(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL)/deplabeler.cpp ./Makefile
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPLABELER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL)/deplabeler.cpp -o $(OBJECT_DIR)/generic.deplabeler.o

# the main executable
$(DIST_GENERIC_DEPLABELER)/deplabeler: $(SRC_COMMON_DEPLABELER)/main.cpp $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/generic.deplabeler.o $(OBJECT_GENERIC_DEPLABELER)/weight.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPLABELER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/main.cpp -o $(OBJECT_GENERIC_DEPLABELER)/main.o
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_DEPLABELER)/deplabeler $(OBJECT_DIR)/generic.deplabeler.o $(OBJECT_GENERIC_DEPLABELER)/weight.o $(OBJECT_GENERIC_DEPLABELER)/main.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECTS)

# the trainer for deplabeler
$(DIST_GENERIC_DEPLABELER)/train: $(SRC_COMMON_DEPLABELER)/train.cpp $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/generic.deplabeler.o $(OBJECT_GENERIC_DEPLABELER)/weight.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(GENERIC_DEPLABELER_D) -DTARGET_LANGUAGE=generic -I$(SRC_GENERIC) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/train.cpp -o $(OBJECT_GENERIC_DEPLABELER)/train.o
	$(LD) $(LDFLAGS) -o $(DIST_GENERIC_DEPLABELER)/train $(OBJECT_DIR)/generic.deplabeler.o $(OBJECT_GENERIC_DEPLABELER)/weight.o $(OBJECT_GENERIC_DEPLABELER)/train.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECTS)


#===================================================================

zpar.ge: $(OBJECT_DIR) $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/cfg.ge.o $(OBJECT_DIR)/deplabel.ge.o $(DIST_DIR) $(OBJECT_DIR)/generic.postagger.o $(OBJECT_GENERIC_TAGGER)/weight.o $(OBJECT_DIR)/generic.conparser.o $(OBJECT_DIR)/constituent.ge.o $(OBJECT_GENERIC_CONPARSER)/weight.o $(OBJECT_DIR)/generic.depparser.o $(OBJECT_GENERIC_DEPPARSER)/weight.o $(OBJECT_DIR)/generic.deplabeler.o  $(OBJECT_GENERIC_DEPLABELER)/weight.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=generic $(GENERIC_DEPPARSER_D) -I$(SRC_GENERIC) -I$(SRC_GENERIC_TAGGER) -I$(SRC_GENERIC_TAGGER)/implementations/$(GENERIC_TAGGER_IMPL) -I$(SRC_GENERIC_CONPARSER) -I$(SRC_GENERIC_CONPARSER)/implementations/$(GENERIC_CONPARSER_IMPL) -I$(SRC_GENERIC_DEPPARSER) -I$(SRC_GENERIC_DEPPARSER)/implementations/$(GENERIC_DEPPARSER_IMPL) -I$(SRC_GENERIC_DEPLABELER) -I$(SRC_GENERIC_DEPLABELER)/implementations/$(GENERIC_DEPLABELER_IMPL) -c $(SRC_GENERIC)/zpar.ge.cpp -o $(OBJECT_DIR)/zpar.ge.o
	$(LD) $(LDFLAGS) -o $(DIST_DIR)/zpar.ge $(OBJECT_DIR)/zpar.ge.o $(OBJECT_DIR)/generic.postagger.o $(OBJECT_GENERIC_TAGGER)/weight.o $(OBJECT_DIR)/generic.conparser.o $(OBJECT_DIR)/constituent.ge.o $(OBJECT_GENERIC_CONPARSER)/weight.o $(OBJECT_DIR)/generic.depparser.o $(OBJECT_GENERIC_DEPPARSER)/weight.o $(OBJECT_DIR)/generic.deplabeler.o $(OBJECT_GENERIC_DEPLABELER)/weight.o $(OBJECT_DIR)/pos.ge.o $(OBJECT_DIR)/cfg.ge.o $(OBJECT_DIR)/deplabel.ge.o $(OBJECTS)
	@echo The generic zpar.ge system compiled successfully into $(DIST_DIR).

